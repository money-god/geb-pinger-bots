org: reflexer
app: geb-pinger-bots
service: geb-pinger-bots

provider:
  name: aws
  runtime: nodejs12.x
  region: 'us-west-2'
  environment: ${self:custom.${opt:stage}}
  vpc:
    subnetIds:
      # A VPC with a subnet needs to be manually configured on the AWS dashboard
      # The subnet needs a NAT gateway with internet access
      - ${param:AWS_VPC_SUBNET_ID_1}
      - ${param:AWS_VPC_SUBNET_ID_2}
    securityGroupIds:
      - ${param:AWS_SECURITY_GROUP}

custom:
  # Redirect to either to conf
  kovan: ${self:custom.prod}
  mainnet: ${self:custom.prod}

  # Fetch env vars from the severless dashboard (depends on the stage which can be either kovan or mainnet)
  prod:
    NETWORK: ${opt:stage}
    ETH_RPC: ${param:ETH_RPC}
    ACCOUNTS_PASSPHRASE: ${param:ACCOUNTS_PASSPHRASE}
    TWILIO_AUTH_TOKEN: ${param:TWILIO_AUTH_TOKEN, ''}
    TWILIO_SEND_NUMBER: ${param:TWILIO_SEND_NUMBER, ''}
    TWILIO_SID: ${param:TWILIO_SID, ''}
    PHONE_NOTIFICATION_RECEIVER: ${param:PHONE_NOTIFICATION_RECEIVER, '[]'}
    GEB_SUBGRAPH_URL: ${param:GEB_SUBGRAPH_URL}
    AWS_SECRET: ${param:AWS_SECRET}
    AWS_ID: ${param:AWS_ID}
    STATUS_BUCKET: ${param:STATUS_BUCKET}
    SLACK_HOOK_ERROR_URL: ${param:SLACK_HOOK_ERROR_URL}
    SLACK_HOOK_MULTISIG_URL: ${param:SLACK_HOOK_MULTISIG_URL}

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:

  updateChainlinkETHMedianizer:
    handler: src/index.updateChainlinkETHMedianizer
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):chainlinkETHMedianizer.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):chainlinkETHMedianizer.schedulerInterval} minutes)


  updateUniswapCoinMedianizer:
    handler: src/index.updateUniswapCoinMedianizer
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):uniswapCoinMedianizer.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):uniswapCoinMedianizer.schedulerInterval} minutes)

  updateETHFsm:
    handler: src/index.updateETHFsm
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):ethFsm.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):ethFsm.schedulerInterval} minutes)

  updateTaxCollector:
    handler: src/index.updateTaxCollector
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):taxCollector.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):taxCollector.schedulerInterval} minutes)

  updateStabilityFeeTreasury:
    handler: src/index.updateStabilityFeeTreasury
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):stabilityFeeTreasury.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):stabilityFeeTreasury.schedulerInterval} minutes)

  pauseExecutor:
    handler: src/index.pauseExecutor
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):pauseExecutor.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):pauseExecutor.schedulerInterval} minutes)

  debtSettler:
    handler: src/index.debtSettler
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):debtSettler.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):debtSettler.schedulerInterval} minutes)

  ceilingSetter:
    handler: src/index.ceilingSetter
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):ceilingSetter.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):ceilingSetter.schedulerInterval} minutes)

  collateralAuctionThrottler:
    handler: src/index.collateralAuctionThrottler
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):collateralAuctionThrottler.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):collateralAuctionThrottler.schedulerInterval} minutes)

  balanceChecker:
    handler: src/index.balanceChecker
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):balanceChecker.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):balanceChecker.schedulerInterval} minutes)

  livenessChecker:
    handler: src/index.livenessChecker
    timeout: 240
    events:
      - schedule: 
          enabled: ${file(./src/config/config.${opt:stage}.json):livenessChecker.enabled}
          rate: rate(${file(./src/config/config.${opt:stage}.json):livenessChecker.schedulerInterval} minutes)
