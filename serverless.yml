org: reflexer
app: geb-pinger-bots
service: geb-pinger-bots

provider:
  name: aws
  runtime: nodejs12.x
  region: 'us-west-2'
  environment: ${self:custom.${opt:stage}}
  vpc:
    subnetIds:
      # A VPC with a subnet needs to be manually configured on the AWS dashboard
      # The subnet needs a NAT gateway with internet access
      - ${param:AWS_VPC_SUBNET_ID_1}
      - ${param:AWS_VPC_SUBNET_ID_2}
    securityGroupIds:
      - ${param:AWS_SECURITY_GROUP}

custom:
  # Redirect to either to conf
  kovan: ${self:custom.prod}
  mainnet: ${self:custom.prod}

  # Fetch env vars from the severless dashboard (depends on the stage which can be either kovan or mainnet)
  prod:
    NETWORK: ${opt:stage}
    ETH_RPC: ${param:ETH_RPC}
    ACCOUNTS_PASSPHRASE: ${param:ACCOUNTS_PASSPHRASE}
    MEDIANIZER_ETH_ADDRESS: ${param:MEDIANIZER_ETH_ADDRESS}
    MEDIANIZER_COIN_ADDRESS: ${param:MEDIANIZER_COIN_ADDRESS}
    FSM_ETH_ADDRESS: ${param:FSM_ETH_ADDRESS}
    ORACLE_RELAYER_ADDRESS: ${param:ORACLE_RELAYER_ADDRESS}
    TAX_COLLECTOR_ADDRESS: ${param:TAX_COLLECTOR_ADDRESS}
    RATE_SETTER_ADDRESS: ${param:RATE_SETTER_ADDRESS}
    STABILITY_FEE_TREASURY_ADDRESS: ${param:STABILITY_FEE_TREASURY_ADDRESS}
    DS_PAUSE_ADDRESS: ${param:DS_PAUSE_ADDRESS}
    ACCOUNTING_ENGINE_ADDRESS: ${param:ACCOUNTING_ENGINE_ADDRESS}
    SAFE_ENGINE_ADDRESS: ${param:SAFE_ENGINE_ADDRESS}
    ETH_A_COLLATERAL_AUCTION_HOUSE_ADDRESS: ${param:ETH_A_COLLATERAL_AUCTION_HOUSE_ADDRESS}
    UNI_ETH_COIN_PAIR_ADDRESS: ${param:UNI_ETH_COIN_PAIR_ADDRESS}
    CEILING_SETTER_ADDRESS: ${param:CEILING_SETTER_ADDRESS}
    COLLATERAL_AUCTION_THROTTLER_ADDRESS: ${param:COLLATERAL_AUCTION_THROTTLER_ADDRESS}
    GNOSIS_SAFE: ${param:GNOSIS_SAFE}
    MIN_ETH_BALANCE: ${param:MIN_ETH_BALANCE, 500000000000000000} # Default 0.5 ETH
    REWARD_RECEIVER: ${param:REWARD_RECEIVER, ''}
    SCHEDULER_INTERVAL_ETH_MEDIAN: ${param:SCHEDULER_INTERVAL_ETH_MEDIAN, 20}
    SCHEDULER_INTERVAL_COIN_MEDIAN: ${param:SCHEDULER_INTERVAL_COIN_MEDIAN, 20}
    SCHEDULER_INTERVAL_ETH_FSM: ${param:SCHEDULER_INTERVAL_ETH_FSM, 20}
    TWILIO_AUTH_TOKEN: ${param:TWILIO_AUTH_TOKEN, ''}
    TWILIO_SEND_NUMBER: ${param:TWILIO_SEND_NUMBER, ''}
    TWILIO_SID: ${param:TWILIO_SID, ''}
    PHONE_NOTIFICATION_RECEIVER: ${param:PHONE_NOTIFICATION_RECEIVER, '[]'}
    GEB_SUBGRAPH_URL: ${param:GEB_SUBGRAPH_URL}
    AWS_SECRET: ${param:AWS_SECRET}
    AWS_ID: ${param:AWS_ID}
    STATUS_BUCKET: ${param:STATUS_BUCKET}
    SLACK_HOOK_ERROR_URL: ${param:SLACK_HOOK_ERROR_URL}
    SLACK_HOOK_MULTISIG_URL: ${param:SLACK_HOOK_MULTISIG_URL}
    MIN_UPDATE_INTERVAL_ETH_MEDIAN: ${param:MIN_UPDATE_INTERVAL_ETH_MEDIAN, 0}
    MIN_UPDATE_INTERVAL_COIN_MEDIAN: ${param:MIN_UPDATE_INTERVAL_COIN_MEDIAN, param:MIN_UPDATE_INTERVAL, 0}
    MIN_UPDATE_INTERVAL_ETH_FSM: ${param:MIN_UPDATE_INTERVAL_ETH_FSM, 0}
    MIN_UPDATE_INTERVAL_TAX_COLLECTOR: ${param:MIN_UPDATE_INTERVAL_TAX_COLLECTOR, 0}
    MIN_UPDATE_INTERVAL_COLLATERAL_AUCTION_THROTTLER: ${param:MIN_UPDATE_INTERVAL_COLLATERAL_AUCTION_THROTTLER}

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:

  # Chainlink pinger not needed since Uni median updates Chainlink
  updateChainlinkETHMedianizer:
    handler: src/index.updateChainlinkETHMedianizer
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_INTERVAL_ETH_MEDIAN, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  updateUniswapCoinMedianizer:
    handler: src/index.updateUniswapCoinMedianizer
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_INTERVAL_COIN_MEDIAN, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  updateETHFsm:
    handler: src/index.updateETHFsm
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_INTERVAL_ETH_FSM, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  updateTaxCollector:
    handler: src/index.updateTaxCollector
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_INTERVAL_TAX_COLLECTOR, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  updateStabilityFeeTreasury:
    handler: src/index.updateStabilityFeeTreasury
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_INTERVAL_STABILITY_FEE_TREASURY, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  pauseExecutor:
    handler: src/index.pauseExecutor
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_PAUSE_EXECUTOR, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  debtSettler:
    handler: src/index.debtSettler
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_DEBT_SETTLER, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  # ceilingSetter:
  #   handler: src/index.ceilingSetter
  #   timeout: 240
  #   events:
  #     - schedule: rate(${param:SCHEDULER_INTERVAL_CEILING_SETTER, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  # collateralAuctionThrottler:
  #   handler: src/index.collateralAuctionThrottler
  #   timeout: 240
  #   events:
  #     - schedule: rate(${param:SCHEDULER_INTERVAL_COLLATERAL_AUCTION_THROTTLER, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  balanceChecker:
    handler: src/index.balanceChecker
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_INTERVAL_BALANCE, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)

  livenessChecker:
    handler: src/index.livenessChecker
    timeout: 240
    events:
      - schedule: rate(${param:SCHEDULER_INTERVAL_LIVENESS, param:SCHEDULER_INTERVAL_DEFAULT, 20} minutes)
